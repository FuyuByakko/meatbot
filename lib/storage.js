
const AUTO_GENERATED_KEY = 'AutoGeneratedKey';

class Storage {
  constructor() {
		this.data = new Map()
	}

	add(key, data, overwrite=true) {
		let storageKey = "" + key;
		if (!key) {
			storageKey = AUTO_GENERATED_KEY;
		}
		while (!overwrite && this.data.has(storageKey)) {
			storageKey = updateKey(key, overwrite)
		}
		this.data.set(storageKey, data);
	}

	size() {
		return this.data.size
	}

	entries() {
		return this.data.entries()
	}

	each(callback) {
		for (const [key, value] of this.data.entries()) {
			callback(key, value);
		}
	}

	toJSObject() {
		try {
			const jsObj = {}
			const addStringified = (key, value) => {
				const stringValue = JSON.stringify(value)
				jsObj[key] = stringValue;
			}
		
			this.each(addStringified);
			return jsObj;
		} catch (error) {
			throw new Error(error.message);
		}
	}
}

function updateKey(key, overwrite) {
	if (overwrite) return key;
	uniqueKey = generateUnique();
	return key + uniqueKey
}

function generateUnique() {
	//TODO: Add a proper string generator or time stamp
	return "" + Math.floor(Math.random() * 100000)
}

module.exports = Storage